import asyncio
import asyncpg
import streamlit as st
from contextlib import asynccontextmanager



@asynccontextmanager
async def get_db_connection():
    conn = None
    try:
        conn = await asyncpg.connect(
            host="localhost",
            port=5432,
            database="postgres",
            user="postgres",
            password="password"
        )
        yield conn
    finally:
        if conn:
            await conn.close()


async def fetch_products(search_query=None, brand_filter=None, category_filter=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    async with get_db_connection() as conn:
        # –ë–∞–∑–æ–≤—ã–π SQL-–∑–∞–ø—Ä–æ—Å
        query = """
            SELECT p.id, p.name, p.description, p.price, p.stock_quantity, b.brand_name AS brand, c.name AS category
            FROM products p
            LEFT JOIN brands b ON p.brand_id = b.id
            LEFT JOIN categories c ON p.category_id = c.id
        """
        # –£—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        conditions = []
        params = []


        if search_query and search_query != "":
            conditions.append(f"p.name LIKE ${len(params) + 1}")
            params.append(f"%{search_query}%")

        if brand_filter and brand_filter.strip():
            # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–æ—Ä—è–¥–æ–∫ $N: –µ—Å–ª–∏ –Ω–µ—Ç search_query, —ç—Ç–æ $1
            conditions.append(f"b.brand_name = ${len(params) + 1}")
            params.append(brand_filter)

            # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category_filter and category_filter.strip():
            conditions.append(f"c.name = ${len(params) + 1}")
            params.append(category_filter)

        # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if conditions:
            query += " WHERE " + " AND ".join(conditions)

        result = await conn.fetch(query, *params)
        return result

async def fetch_brands():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±—Ä–µ–Ω–¥–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    async with get_db_connection() as conn:
        query = "SELECT DISTINCT brand_name FROM brands"
        result = await conn.fetch(query)
        return [record['brand_name'] for record in result]


async def fetch_categories():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    async with get_db_connection() as conn:
        query = "SELECT DISTINCT name FROM categories"
        result = await conn.fetch(query)
        return [record['name'] for record in result]

async def update_product_stock_quantity(product_id, stock_diff):
    async with get_db_connection() as conn:
        query = '''UPDATE products
                          SET stock_quantity = stock_quantity + $1
                          WHERE id = $2'''
        conn.execute(query, stock_diff, product_id)
        conn.commit()


async def fetch_reviews(product_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–æ–≤–∞—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    async with get_db_connection() as conn:
        query = '''SELECT c.name, r.comment, r.rate
                   FROM reviews r
                   JOIN customers c 
                   ON r.customer_id = c.id
                   WHERE r.product_id = $1'''
        result = await conn.fetch(query, product_id)
        return result


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã –≤ session_state
if 'cart' not in st.session_state:
    st.session_state.cart = {}


async def add_to_cart(product_id, name, price, quantity):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –≤ order_items."""
    order_id = st.session_state.order_id
    if product_id in st.session_state.cart:
        st.info("–¢–æ–≤–∞—Ä —É–∂–µ —É –≤–∞—Å –≤ –∫–æ—Ä–∑–∏–Ω–µ")
        return
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –±–∞–∑—É
        st.session_state.cart[product_id] = {
            'name': name,
            'price': price,
            'quantity': quantity
        }

        await add_item_to_order(order_id, product_id, quantity, price)

    await update_order_summary(order_id)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ orders
    st.success(f"–¢–æ–≤–∞—Ä '{name}' ({quantity} —à—Ç.) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")


async def create_new_order(customer_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ orders."""
    async with get_db_connection() as conn:
        query = """
            INSERT INTO orders (customer_id, order_date, order_summ, order_state)
            VALUES ($1, DATE_TRUNC('minute', NOW()), $2, $3)
            RETURNING id
        """
        # await conn.execute(query, (customer_id, 0, '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ'))  # –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –ø–æ–∫–∞ –Ω—É–ª–µ–≤–∞—è
        results = await conn.fetch(query, customer_id, 0, '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ')

        # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º id –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        return results[0]['id'] if results else None


async def add_item_to_order(order_id, product_id, quantity, unitprice):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü—É order_items."""
    async with get_db_connection() as conn:
        query = """
            INSERT INTO order_items (order_id, product_id, quantity, unitprice)
            VALUES ($1, $2, $3, $4)
        """
        await conn.execute(query, order_id, product_id, quantity, unitprice)



async def update_order_summary(order_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã –≤ —Ç–∞–±–ª–∏—Ü–µ orders."""
    async with get_db_connection() as conn:
        query = """
            UPDATE orders
            SET order_summ = (
                SELECT SUM(quantity * unitprice)
                FROM order_items
                WHERE order_id = $1
            )
            WHERE id = $1
        """
        await conn.execute(query, order_id)



def purchase_page(customer_id):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É."""
    st.title("–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")
    st.sidebar.info("üîµ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫.")

    if 'order_id' not in st.session_state:
        st.session_state.order_id = asyncio.run(create_new_order(customer_id))


    all_brands = ["–í—Å–µ"] + asyncio.run(fetch_brands())
    all_categories = ["–í—Å–µ"] + asyncio.run(fetch_categories())

    st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")
    search_query = st.sidebar.text_input("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞")

    # –í—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    selected_brand = st.sidebar.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –±—Ä–µ–Ω–¥—É", all_brands)
    selected_category = st.sidebar.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", all_categories)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    brand_filter = None if selected_brand == "–í—Å–µ" else selected_brand
    category_filter = None if selected_category == "–í—Å–µ" else selected_category

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
    products = asyncio.run(fetch_products(search_query, brand_filter, category_filter))

    if products is not None:
        if int(len(products)) == 0:
            st.warning("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...")
        else:
            st.write("##### –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:")

        rerun_button = st.button("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
        if rerun_button:
            st.rerun()

        for product in products:
            if product['stock_quantity'] > 0:
                with st.expander(f"{product['name']} - ${product['price']}"):
                    st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {product['description']}")
                    st.write(f"**–¶–µ–Ω–∞:** ${product['price']}")
                    st.write(f"**–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ:** {product['stock_quantity']}")

                    # –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤
                    st.subheader("–û—Ç–∑—ã–≤—ã –æ —Ç–æ–≤–∞—Ä–µ")
                    reviews = asyncio.run(fetch_reviews(product['id']))
                    if reviews:
                        for review in reviews:
                            st.write(f"üìú {review['name']}: {review['comment']} (–û—Ü–µ–Ω–∫–∞: {review['rate']}/5)")
                    else:
                        st.write("–ü–æ–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç.")

                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
                    with st.form(key=f"form_{product['id']}"):
                        quantity = st.number_input(
                            "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
                            min_value=1,
                            max_value=product['stock_quantity'],
                            value=1,
                            key=f"quantity_{product['id']}"
                        )
                        add_button = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É")
                        if add_button:
                            if product['stock_quantity'] >= quantity:
                                asyncio.run(add_to_cart(product['id'], product['name'], product['price'], quantity))
                            else:
                                st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É.")
            else:
                st.warning(f"–¢–æ–≤–∞—Ä–∞ {product['name']} –ø–æ–∫–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏")

    elif products is None:
        st.warning("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    else:
        st.warning("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...")